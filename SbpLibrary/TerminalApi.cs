using System;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using SBPLibrary.Models;
using SBPLibrary.Models.Sber;

namespace SBPLibrary
{
    /// <summary>
    /// An API used by UI on physical payment terminals.
    /// </summary>
    public interface ITerminalApi
    {
        /// <summary>
        /// Invokes as a result of order status pulling.
        /// </summary>
        event Action<EventModel> PaymentConfirmationEvent;
        
        /// <summary>
        /// Invokes as a CreateOrderAndPullStatus result.
        /// </summary>
        event Action<EventModel> QrReceivedEvent;
        
        /// <summary>
        /// Invokes as RequestRevocation result.
        /// </summary>
        event Action<EventModel> RevocationEvent;
        
        /// <summary>
        /// Invokes as RequestRefunding result.
        /// </summary>
        event Action<EventModel> RefundingEvent;

        /// <summary>
        /// Creates new order in SBP. As a result it calls QrReceivedEvent.
        /// If order created successfully, method start pulling its status until
        /// it gets status Paid or Revoked. When status Paid received,
        /// PaymentConfirmationEvent called.
        /// </summary>
        /// <param name="sum">Order sum</param>
        /// <param name="orderNumber">Order number generated by client</param>
        /// <param name="cts">CancellationTokenSource for pulling cancel. Must be new for each call.</param>
        /// <param name="description">Order description</param>
        void CreateOrderAndPullStatus(decimal sum, decimal orderNumber, CancellationTokenSource cts, string description = "");
        
        /// <summary>
        /// Sends a query for unpaid order revocation. As a result it calls RevocationEvent.
        /// </summary>
        /// <param name="orderId">OrderId received after order creation</param>
        void RequestRevocation(string orderId);
        
        /// <summary>
        /// Sends a query for paid order cancelation. As a result it calls RefundingEvent.
        /// </summary>
        /// <param name="orderId">OrderId received after order creation.</param>
        /// <param name="operationId">OperationId received after payment confirmation.</param>
        /// <param name="sum">Refund sum.</param>
        void RequestRefunding(string orderId, string operationId, decimal sum);
    }
    
    public class TerminalApi : ITerminalApi
    {
        private readonly IPaymentApi _paymentApi;
        private readonly ILogger _logger;
        private readonly string _terminalId;
        private readonly string _memberId;
        private readonly string _currency;

        private const int PullRequestDelayMs = 1000;
        private const int PenniesInCurrencyUnit = 100;
        private const string RefundOperationType = "REFUND";
        private const string StubAuthCode = "00000000";

        public event Action<EventModel> PaymentConfirmationEvent;
        
        public event Action<EventModel> QrReceivedEvent;
        
        public event Action<EventModel> RevocationEvent;
        
        public event Action<EventModel> RefundingEvent;

        public TerminalApi(SbpSettings settings, IPaymentApi paymentApi, ILogger logger)
        {
            _logger = logger;
            _paymentApi = paymentApi;
            _terminalId = settings.TerminalId;
            _memberId = settings.MemberId;
            _currency = settings.Currency;
        }

        public void CreateOrderAndPullStatus(decimal sum, decimal orderNumber, CancellationTokenSource cts, string description = "")
        {
            try
            {
                var orderNumberString = orderNumber.ToString(CultureInfo.InvariantCulture);

                var result = _paymentApi.CreatePayment(new CreatePaymentRequest
                {
                    MemberId = _memberId,
                    OrderNumber = orderNumberString,
                    OrderCreateDate = DateTime.Now,
                    OrderParamsType = new List<OrderParamItem>(),
                    OrderSum = (int)(sum * PenniesInCurrencyUnit),
                    Currency = _currency,
                    Description = description,
                    IdQr = _terminalId
                });

                if (result.IsError)
                {
                    QrReceivedEvent?.Invoke(new EventModel
                    {
                        IsError = true,
                        ErrorMessage = result.ErrorMsg
                    });
                    return;
                }

                QrReceivedEvent?.Invoke(new EventModel
                {
                    OrderId = result.RespObject.order_id,
                    QrUrl = result.RespObject.order_form_url,
                });


                // Start order status pulling.
                Task.Run(() => PullStatus(new PullStatusPayload
                {
                    OrderId = result.RespObject.order_id,
                    OrderNumber = orderNumberString,
                    Token = cts.Token
                }), cts.Token);
            } catch (Exception e)
            {
                _logger.Error($"Exception thrown in CreateOrderAndPullStatus " +
                              $"(orderNumber: {orderNumber}, sum: {sum}): {e.Message}");
                QrReceivedEvent?.Invoke(new EventModel { IsError = true, ErrorMessage = $"Exception: {e.Message}" });
            }
        }
        
        public void RequestRevocation(string orderId)
        {
            try
            {
                var result = _paymentApi.RevokeOrder(new RevokeRequest
                {
                    OrderId = orderId
                });

                RevocationEvent?.Invoke(result.IsError
                    ? new EventModel { IsError = true, ErrorMessage = result.ErrorMsg }
                    : new EventModel { OrderId = orderId, OrderStatus = result.RespObject.order_state });
            } 
            catch (Exception e)
            {
                _logger.Error($"Exception thrown in RequestRevocation" + 
                              $"(orderId: {orderId}): {e.Message}");
                RevocationEvent?.Invoke(new EventModel { IsError = true, ErrorMessage = $"Exception: {e.Message}" });
            }
        }
        
        public void RequestRefunding(string orderId, string operationId, decimal sum)
        {
            try
            {
                var result = _paymentApi.CancelPayment(new CancelRequest
                {
                    OperationId = operationId,
                    OperationType = RefundOperationType,
                    OrderId = orderId,
                    Tid = _terminalId,
                    IdQr = _terminalId,
                    CancelOperationSum = (int)(sum * PenniesInCurrencyUnit),
                    OperationCurrency = _currency,
                    AuthCode = StubAuthCode
                });

                RefundingEvent?.Invoke(result.IsError
                    ? new EventModel
                    {
                        IsError = true,
                        ErrorMessage = result.RespObject == null ? result.ErrorMsg : result.RespObject.error_description
                    }
                    : new EventModel());
            }
            catch (Exception e)
            {
                _logger.Error($"Exception thrown in RequestRefunding " +
                             $"(orderId: {orderId}, operationId: {operationId}, sum: {sum}): {e.Message}");
                RefundingEvent?.Invoke(new EventModel { IsError = true, ErrorMessage = $"Exception: {e.Message}" });
            }
        }

        /// <summary>
        /// Checks the order status in the loop.
        /// If an error occurred during the loop,
        /// the loop breaks.
        /// </summary>
        /// <param name="payload">Order parameters structure</param>
        private void PullStatus(PullStatusPayload payload)
        {
            if (payload == null)
            {
                _logger.Error("[PullStatus] method called with payload = null.");
                PaymentConfirmationEvent?.Invoke(new EventModel { IsError = true, ErrorMessage = "Invalid payload for puller." });
                return;
            }

            while (!payload.Token.IsCancellationRequested)
            {
                try
                {
                    Thread.Sleep(PullRequestDelayMs);

                    var response = _paymentApi.GetStatus(new OrderStatusRequest
                    {
                        OrderId = payload.OrderId,
                        Tid = _terminalId,
                        PartnerOrderNumber = payload.OrderNumber
                    });

                    _logger.Info($"[PullStatus] Pulling order status for orderId {payload.OrderId}. Now it is " + response.RespObject.order_state);

                    if (response.RespObject.order_state == OrderStatus.Paid)
                    {
                        if (response.RespObject.order_operation_params.Count == 0)
                        {
                            PaymentConfirmationEvent?.Invoke(new EventModel { IsError = true,
                                ErrorMessage = "Invalid data from API: OrderOperationParams is null or empty" });
                        }
                        else
                        {
                            PaymentConfirmationEvent?.Invoke(new EventModel
                            {
                                OrderId = payload.OrderId,
                                OperationId = response.RespObject.order_operation_params[0].operation_id
                            });
                        }

                        break;
                    }

                    if (response.RespObject.order_state != OrderStatus.Declined &&
                        response.RespObject.order_state != OrderStatus.Expired &&
                        response.RespObject.order_state != OrderStatus.Revoked) continue;
                    
                    _logger.Info($"[PullStatus] Order status is {response.RespObject.order_state}. Pulling stopped.");
                    PaymentConfirmationEvent?.Invoke(new EventModel { 
                        IsError = true, 
                        ErrorMessage = $"Order status is {response.RespObject.order_state}. Pulling stopped."
                    });
                    break;
                }
                catch (Exception e)
                {
                    _logger.Error("[PullStatus] Exception thrown while pulling status " +
                                 $"(orderId: {payload.OrderId}, orderNumber: {payload.OrderNumber}): {e.Message}");
                    
                    PaymentConfirmationEvent?.Invoke(new EventModel
                    {
                        IsError = true,
                        ErrorMessage = "Pulling exception: " + e.Message
                    });
                    
                    break;
                }
            }

            if (!payload.Token.IsCancellationRequested) return;
            
            PaymentConfirmationEvent?.Invoke(new EventModel
                { IsError = true, ErrorMessage = "Pulling aborted by cancellation token." });

            // We should cancel unpaid order.
            RequestRevocation(payload.OrderId);
                
            _logger.Info($"Status pulling aborted by cancellation token " +
                        $"(orderId: {payload.OrderId}, orderNumber: {payload.OrderNumber})");
        }
    }
}